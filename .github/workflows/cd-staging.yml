name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  STAGING_HOST: staging.festival-planner.example.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging-latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Generate deployment artifact
      run: |
        mkdir -p deployment
        cat > deployment/docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
            environment:
              - RAILS_ENV=staging
            # Additional staging-specific configuration
        EOF

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-config
        path: deployment/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://${{ env.STAGING_HOST }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment artifact
      uses: actions/download-artifact@v5
      with:
        name: deployment-config
        path: deployment/

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /opt/festival-planner-platform
          
          # Backup current deployment
          sudo docker-compose ps > deployment_backup_$(date +%Y%m%d_%H%M%S).log
          
          # Pull latest images
          sudo docker-compose pull
          
          # Run database migrations
          sudo docker-compose run --rm app bundle exec rails db:migrate
          
          # Deploy with zero downtime
          sudo docker-compose up -d --force-recreate --renew-anon-volumes
          
          # Wait for services to be healthy
          sleep 30
          
          # Health check
          curl -f https://${{ env.STAGING_HOST }}/up || exit 1
          
          # Clean up old images
          sudo docker image prune -f

    - name: Run integration tests
      run: |
        # Wait for deployment to stabilize
        sleep 60
        
        # Run integration tests against staging
        curl -f https://${{ env.STAGING_HOST }}/up
        curl -f https://${{ env.STAGING_HOST }}/api/health

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Staging deployment ${{ job.status }}!
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          URL: https://${{ env.STAGING_HOST }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}