name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.2
        bundler-cache: true

    - name: Run bundle audit
      run: |
        bundle exec bundle audit check --update
        bundle exec bundle audit check --format json --output tmp/bundle-audit.json

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: tmp/bundle-audit.json

  code-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.2
        bundler-cache: true

    - name: Run Brakeman security scan
      run: |
        bundle exec brakeman --no-pager --format json --output tmp/brakeman.json
        bundle exec brakeman --no-pager --format sarif --output tmp/brakeman.sarif

    - name: Upload Brakeman scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tmp/brakeman.sarif

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: brakeman-results
        path: tmp/brakeman.json

  container-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: docker build -t festival-planner-platform:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'festival-planner-platform:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy for detailed report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'festival-planner-platform:security-scan'
        format: 'json'
        output: 'trivy-detailed.json'

    - name: Upload detailed Trivy results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-detailed-results
        path: trivy-detailed.json

  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'ruby', 'javascript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Set up Ruby (for Ruby analysis)
      if: matrix.language == 'ruby'
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.2
        bundler-cache: true

    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies (for JavaScript analysis)
      if: matrix.language == 'javascript'
      run: npm install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security-scan, container-security-scan, secret-scan, codeql-analysis]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check for high severity issues
        if [ -f "brakeman-results/brakeman.json" ]; then
          HIGH_ISSUES=$(jq '[.warnings[] | select(.confidence == "High")] | length' brakeman-results/brakeman.json)
          echo "- Brakeman High Confidence Issues: $HIGH_ISSUES" >> security-summary.md
        fi
        
        if [ -f "trivy-detailed-results/trivy-detailed.json" ]; then
          CRITICAL_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-detailed-results/trivy-detailed.json)
          HIGH_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-detailed-results/trivy-detailed.json)
          echo "- Container Critical Vulnerabilities: $CRITICAL_VULNS" >> security-summary.md
          echo "- Container High Vulnerabilities: $HIGH_VULNS" >> security-summary.md
        fi
        
        if [ -f "dependency-scan-results/bundle-audit.json" ]; then
          VULNERABLE_GEMS=$(jq '.vulnerabilities | length' dependency-scan-results/bundle-audit.json)
          echo "- Vulnerable Dependencies: $VULNERABLE_GEMS" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review and address high-confidence security issues" >> security-summary.md
        echo "2. Update vulnerable dependencies to patched versions" >> security-summary.md
        echo "3. Review container base image for security updates" >> security-summary.md
        echo "4. Ensure no secrets are committed to the repository" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });