# Production environment configuration
# This file contains production-specific settings

require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot for better performance and memory usage.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local = false
  config.action_controller.perform_caching = true

  # Ensures that a master key has been made available in either ENV["RAILS_MASTER_KEY"]
  # or in config/master.key. This key is used to decrypt credentials (and other encrypted files).
  config.require_master_key = true

  # Disable serving static files from the `/public` folder by default since
  # Apache or NGINX already handles this.
  config.public_file_server.enabled = ENV["RAILS_SERVE_STATIC_FILES"].present?

  # Compress CSS using a preprocessor.
  # config.assets.css_compressor = :sass

  # Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for Apache
  # config.action_dispatch.x_sendfile_header = "X-Accel-Redirect" # for NGINX

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.variant_processor = :mini_magick

  # Mount Action Cable outside main process or domain.
  # config.action_cable.mount_path = nil
  # config.action_cable.url = "wss://example.com/cable"
  # config.action_cable.allowed_request_origins = [ "http://example.com", /http:\/\/example.*/ ]

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Log to STDOUT by default
  config.logger = ActiveSupport::Logger.new(STDOUT)
    .tap  { |logger| logger.formatter = ::Logger::Formatter.new }
    .then { |logger| ActiveSupport::TaggedLogging.new(logger) }

  # Prepend all log lines with the following tags.
  config.log_tags = [ :request_id ]

  # Info include generic and useful information about system operation, but avoids logging too much
  # information to avoid inadvertent exposure of personally identifiable information (PII). If you
  # want to log everything, set the level to "debug".
  config.log_level = ENV.fetch("RAILS_LOG_LEVEL", "info")

  # Use a different cache store in production.
  config.cache_store = :redis_cache_store, {
    url: ENV.fetch("REDIS_URL", "redis://localhost:6379/0"),
    namespace: "festival_planner_platform",
    expires_in: 1.hour,
    race_condition_ttl: 10.seconds,
    error_handler: -> (method:, returning:, exception:) {
      Rails.logger.error("Redis cache error: #{exception}")
    }
  }

  # Use a real queuing backend for Active Job (and separate queues per environment).
  config.active_job.queue_adapter = :sidekiq
  config.active_job.queue_name_prefix = "festival_planner_platform_production"

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  # Skip DNS rebinding protection for the default health check port.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }

  # Security headers
  config.force_ssl = true
  config.ssl_options = { hsts: { expires: 1.year, subdomains: true } }

  # Session configuration
  config.session_store :cookie_store, 
    key: '_festival_planner_platform_session',
    secure: true,
    httponly: true,
    same_site: :strict,
    expire_after: 24.hours

  # Active Storage configuration
  config.active_storage.variant_processor = :mini_magick
  config.active_storage.video_preview_arguments = [
    "-vf", "scale=800:600:force_original_aspect_ratio=decrease"
  ]

  # Mailer configuration
  config.action_mailer.perform_caching = false
  config.action_mailer.raise_delivery_errors = true
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
    address: ENV['SMTP_ADDRESS'],
    port: ENV['SMTP_PORT'] || 587,
    domain: ENV['SMTP_DOMAIN'],
    user_name: ENV['SMTP_USERNAME'],
    password: ENV['SMTP_PASSWORD'],
    authentication: :plain,
    enable_starttls_auto: true
  }
  config.action_mailer.default_url_options = { 
    host: ENV['APPLICATION_HOST'], 
    protocol: 'https' 
  }

  # Asset configuration
  config.assets.digest = true
  config.assets.js_compressor = :terser
  config.assets.css_compressor = :sass

  # Performance optimizations
  config.assets.gzip = true
  config.middleware.insert_before(Rack::Sendfile, Rack::Deflater)

  # Security middleware
  config.middleware.use Rack::Attack

  # Rate limiting and security
  config.middleware.insert_before 0, Rack::Cors do
    allow do
      origins ENV['CORS_ORIGINS']&.split(',') || ['https://festival-planner.example.com']
      resource '*',
        headers: :any,
        methods: [:get, :post, :put, :patch, :delete, :options, :head],
        credentials: true
    end
  end

  # Content Security Policy
  config.content_security_policy do |policy|
    policy.default_src :self
    policy.font_src    :self, :data
    policy.img_src     :self, :data, :https
    policy.object_src  :none
    policy.script_src  :self, :unsafe_inline, :unsafe_eval
    policy.style_src   :self, :unsafe_inline
    policy.connect_src :self
    policy.frame_ancestors :none
  end

  config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
  config.content_security_policy_nonce_directives = %w(script-src)

  # Specify whether to report violations
  config.content_security_policy_report_only = false

  # Health check configuration
  config.force_ssl = true
  config.ssl_options = { 
    hsts: { expires: 1.year, subdomains: true },
    secure_cookies: true
  }

  # Exception handling
  config.exceptions_app = self.routes

  # Timeout configuration
  Rack::Timeout.timeout = 30

  # Database configuration
  config.active_record.connection_pool_size = 25
  config.active_record.checkout_timeout = 5

  # Internationalization
  config.i18n.available_locales = [:en, :ja]
  config.i18n.default_locale = :ja

  # Time zone
  config.time_zone = 'Tokyo'
end